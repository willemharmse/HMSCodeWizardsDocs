openapi: 3.0.0
info:
  title: HMS Backend Code Wizards
  version: 1.0.0
  description:  Description of all the paths of the backend as well as needed information and status codes
servers:
  - url: http://localhost:3000
components:
  schemas:
    User:
      type: object
      properties:
        _id: 
          type: string
          format: objectId
          description: Unique identifier for the user (auto-generated by MongoDB)
        username:
          type: string
          description: Unique username for the user
        password:
          type: string
          description: The password is hashed using bcrypt.
        email:
          type: string
          description: Email address of the user
        role:
          type: string
          enum: [student, admin, lecturer]
          description: Role of the user (e.g., student, lecturer, admin)
      required:
        - username
        - password
        - email
        - role

    StudentUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            enrollmentYear:
              type: integer
              description: Year of enrollment
          required:
            - enrollmentYear

    LecturerUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            department:
              type: string
              description: The department in which the lecturer works
          required:
            - department

    AdminUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object

    Student:
      type: object
      properties:
        _id: 
          type: string
          format: objectId
          description: Unique identifier for the student (auto-generated by MongoDB)
        user:
          type: string
          format: objectId
          description: Reference to the User model (the user associated with this student)
        coursesEnrolled:
          type: array
          items:
            type: string
            format: objectId
          description: List of course ID's the student is enrolled in
        enrollmentYear:
          type: integer
          description: Year the student enrolled
      required:
        - user
        - enrollmentYear

    Lecturer:
      type: object
      properties:
        _id: 
          type: string
          format: objectId
          description: Unique identifier for the lecturer (auto-generated by MongoDB)
        user:
          type: string
          format: objectId
          description: Reference to the User model (the user associated with this lecturer)
        coursesTaught:
          type: array
          items:
            type: string
            format: objectId
          description: List of course ID's the lecturer teaches
        department:
          type: string
          description: The department the lecturer works in
      required:
        - user
        - department

    Admin:
      type: object
      properties:
        _id: 
          type: string
          format: objectId
          description: Unique identifier for the admin (auto-generated by MongoDB)
        user:
          type: string
          format: objectId
          description: Reference to the User model (the user associated with this admin)
      required:
        - user

    Course:
      type: object
      properties:
        _id: 
          type: string
          format: objectId
          description: Unique identifier for the course (auto-generated by MongoDB)
        courseName:
          type: string
          description: Unique name for each course
        courseCode:
          type: string
          description: Unique code to identify each course
        description:
          type: string
          description: Description of the course
      required:
        - courseName
        - courseCode
        - description

    Assignment:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          description: Unique identifier for the assignment (auto-generated by MongoDB)
        title:
          type: string
          description: Name of the assignment given by the lecturer/admin
        description:
          type: string
          description: Description of what to do in the assignment
        dueDate:
          type: string
          format: yyyy-mm-dd
        course:
          type: string
          format: objectId
          description: Reference to the course model to which the assignment belongs
        mark:
          type: integer
          description: The amount the assignment counts
          minimum: 0
          maximum: 250
        assignCode:
          type: string
          description: Code generated by the program for each assignment to avoid duplicate names for different course assignments
      required:
        - title
        - description
        - dueDate
        - course
        - mark
        - assignCode

    File: 
      type: object
      properties:
        _id:
          type: string
          format: objectId
          description: Unique identifier for the file (auto-generated by MongoDB)
        fileName:
          type: string
          description: Name of the file that was uploaded by the user
        fileURL:
          type: string
          description: Location that the file is stored on the file storage system
        uploadedByUserID:
          type: string
          format: objectId
          description: Reference to the user that has uploaded the file to the system
      required:
        - fileName
        - fileURL
        - uploadedByUserID

    Submission: 
      type: object
      properties:
        _id:
          type: string
          format: objectId
          description: Unique identifier for the submission (auto-generated by MongoDB)
        assignment:
          type: string
          format: objectId
          description: Reference to the assignment the submission is for
        user: 
          type: string
          format: objectId
          description: Reference to the user the submission was created by     
        submittedAt:
          type: string
          format: yyyy-mm-dd
          description: The current date and time is recorded when the student submits 
        grade: 
          type: integer
          description: The mark achieved by the student for the submission submitted
          minimum: 0
          maximum: 0
        feedback:
          type: string
          description: Feedback provided by the lecturer/grader
        file: 
          type: string
          format: objectId
          description: Reference to the file that was submitted with the submission
      required:
        - assignment
        - user
        - file
    
    Notification:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          description: Unique identifier for the notification (auto-generated by MongoDB)
        recipientUser: 
          type: string
          format: objectId
          description: Reference to the user the notification is for
        message:
          type: string
          description: Message for the notification
        createdAt: 
          type: string
          format: yyyy-mm-dd
          description: The current date and time is recorded when the notification is created
      required:
        - user
        - message

paths:
  /api/user/create:
    post:
      tags:
        - Users
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  oneOf:
                    - $ref: '#/components/schemas/StudentUser'
                    - $ref: '#/components/schemas/AdminUser'
                    - $ref: '#/components/schemas/LecturerUser'
      responses:
        '200':
          description: User created successfully
        '400':
          description: Bad request. Username already used.
        '500': 
          description: Error during creation of user account.

  /api/user/student/{username}:
    get:
      tags:
        - Users
      summary: Get student information
      operationId: getStudent
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the student
          schema:
            type: string
      responses:
        '200':
          description: Student information retrieved successfully
        '400': 
          description: Bad request. User is not a student.
        '404':
          description: Student or User not found
        '500': 
          description: Error during retrieval of student details

  /api/user/lecturer/{username}:
    get:
      tags:
        - Users
      summary: Get lecturer information
      operationId: getLecturer
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the lecturer
          schema:
            type: string
      responses:
        '200':
          description: Lecturer information retrieved successfully
        '400': 
          description: Bad request. User is not a lecturer.
        '404':
          description: Lecturer not found
        '500': 
          description: Error during retrieval of lecturer details

  /api/user/admin/{username}:
    get:
      tags:
        - Users
      summary: Get admin information
      operationId: getAdmin
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the admin
          schema:
            type: string
      responses:
        '200':
          description: Admin information retrieved successfully
        '400': 
          description: Bad request. User is not a admin.
        '404':
          description: Admin not found
        '500': 
          description: Error during retrieval of admin details

  /api/user/login:
    post:
      tags:
        - Users
      summary: User login
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token that can be used to authenticate future requests, it contains the userID as well as the users role
                example:
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid credentials
        '500':
          description: Error during logging in

  /api/user/logout:
    get:
      summary: User logout
      operationId: userLogout
      tags:
        - Users
      responses:
        '200':
          description: User logged out successfully
        '404':
          description: User that is logged in not found
        '500':
          description: Error during logout

  /api/user/update/{username}:
    put:
      summary: Update a user's information
      operationId: updateUser
      security:
        - bearerAuth: []
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the user to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: New email for the user
                role:
                  type: string
                  enum: [admin, student, lecturer]
                  description: New role for the user (admin, student, lecturer)
                department:
                  type: string
                  description: New department if the role is lecturer, not required is user is changed to admin or student
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request or validation error
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/user/delete/{username}:
    delete:
      summary: Delete a user
      operationId: deleteUser
      security:
        - bearerAuth: []
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to delete
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Bad request or validation error
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/course/:
    get:
      summary: Get all courses
      operationId: getAllCourses
      tags:
        - Course
      responses:
        '200':
          description: A list of courses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Course'
                type: array
                items:
                  type: object
                  properties:
                    courseName:
                      type: string
                    courseCode:
                      type: string
        '404':
          description: No courses were found in the system
        '500':
          description: Internal server error
  
  /api/course/{courseCode}:
    get:
      summary: Find details for a certain course
      operationId: getCourse
      tags:
        - Course
      parameters:
        - name: courseCode
          in: path
          required: true
          description: The course code to find details about
          schema:
            type: string
      responses:
        '200':
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Course'
                type: object
        '404':
          description: Course not found
        '500':
          description: Internal server error    

  /api/course/create:
    post:
      summary: Create a new course
      operationId: createCourse
      security:
        - bearerAuth: []
      tags:
        - Course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseName:
                  type: string
                courseCode:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Course created successfully
        '400':
          description: Bad request or validation error
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: User not found
        '500':
          description: Internal server error
  
  /api/course/update/{courseCode}:
    put:
      summary: Update a course
      operationId: updateCourse
      security:
        - bearerAuth: []
      tags:
        - Course
      parameters:
        - name: courseCode
          in: path
          required: true
          description: The course code to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseCode:
                  type: string
                  description: New course code
                courseName:
                  type: string
                  description: New course name
                description:
                  type: string
                  description: New course description
      responses:
        '200':
          description: Course updated successfully
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: Course not found
        '500':
          description: Internal server error

  /api/course/delete/{courseCode}:
    delete:
      summary: Delete a course
      operationId: deleteCourse
      security:
        - bearerAuth: []
      tags:
        - Course
      parameters:
        - name: courseCode
          in: path
          required: true
          description: The course code of the course to delete
          schema:
            type: string
      responses:
        '200':
          description: Course deleted successfully
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: Course not found
        '500':
          description: Internal server error

  /api/course/lecturer/{username}/{courseCode}:
    post:
      summary: Assign a lecturer to a course
      operationId: assignLecturer
      security:
        - bearerAuth: []
      tags:
        - Course
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the lecturer
          schema:
            type: string
        - name: courseCode
          in: path
          required: true
          description: The course code
          schema:
            type: string
      responses:
        '200':
          description: Lecturer assigned successfully
        '400': 
          description: Bad request
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: Course not found
        '500':
          description: Internal server error

  /api/course/student/{username}/{courseCode}:
    post:
      summary: Enroll a student in a course
      operationId: enrollStudent
      security:
        - bearerAuth: []
      tags:
        - Course
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the student
          schema:
            type: string
        - name: courseCode
          in: path
          required: true
          description: The course code
          schema:
            type: string
      responses:
        '200':
          description: Student enrolled successfully
        '400': 
          description: Bad request
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: Course not found
        '500':
          description: Internal server error

  /api/assignment/course/{courseCode}:
    get:
      summary: Get all assignments for a course
      operationId: getAllAssignments
      tags:
        - Assignment
      responses:
        '200':
          description: A list of assignments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Assignment'
                type: array
        '404':
          description: Assignments not found
        '500':
          description: Internal server error

  /api/assignment/{assignCode}:
    get:
      summary: Get details for an assignment
      operationId: getAssignments
      tags:
        - Assignment
      responses:
        '200':
          description: Details for assignment successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Assignment'
                type: object
        '404':
          description: Assignments not found
        '500':
          description: Internal server error

  /api/assignment/create:
    post:
      summary: Create a new assignment
      operationId: createAssignment
      security:
        - bearerAuth: []
      tags:
        - Assignment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                dueDate:
                  type: string
                  format: date
                courseCode:
                  type: string
                  example: CS101
      responses:
        '200':
          description: Assignment created successfully
        '400': 
          description: Bad request
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: Course not found
        '500':
          description: Internal server error

  /api/assignment/update/{assignCode}:
    put:
      summary: Update an assignment
      operationId: updateAssignment
      security:
        - bearerAuth: []
      tags:
        - Assignment
      parameters:
        - name: assignCode
          in: path
          required: true
          description: The assignment code to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                dueDate:
                  type: string
                  format: date
      responses:
        '200':
          description: Assignment updated successfully
        '400': 
          description: Bad request
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: Assignment not found
        '500':
          description: Internal server error

  /api/assignment/delete/{assignCode}:
    delete:
      summary: Delete an assignment
      operationId: deleteAssignment
      security:
        - bearerAuth: []
      tags:
        - Assignment
      parameters:
        - name: assignCode
          in: path
          required: true
          description: The assignment code to delete
          schema:
            type: string
      responses:
        '200':
          description: Assignment deleted successfully
        '400': 
          description: Bad request
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: Assignment not found
        '500':
          description: Internal server error

  /api/grades/{assignCode}:
    get:
      summary: Get marks for an assignment
      operationId: getMarks
      security:
        - bearerAuth: []
      tags:
        - Excel File Download
      parameters:
        - name: assignCode
          in: path
          required: true
          description: The assignment code
          schema:
            type: string
      responses:
        '200':
          description: Marks retrieved successfully
        '400': 
          description: Bad request
        '401':
          description: Unauthorized - Missing or invalid token
        '404':
          description: Assignment not found
        '500':
          description: Internal server error

  /submissions:
    post:
      summary: Submit an assignment
      operationId: submitAssignment
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                assignCode:
                  type: string
                username:
                  type: string
      responses:
        '201':
          description: Assignment submitted successfully
        '400':
          description: Bad request

  /submissions/assignment/{assignCode}:
    get:
      summary: Get submissions for an assignment
      operationId: getSubmissionsByAssignment
      parameters:
        - name: assignCode
          in: path
          required: true
          description: The assignment code
          schema:
            type: string
      responses:
        '200':
          description: List of submissions retrieved successfully
        '404':
          description: Assignment not found

  /submissions/{username}/{assignCode}:
    get:
      summary: Get a specific submission by username and assignment code
      operationId: getSubmissionByUserAndAssignment
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the student
          schema:
            type: string
        - name: assignCode
          in: path
          required: true
          description: The assignment code
          schema:
            type: string
      responses:
        '200':
          description: Submission retrieved successfully
        '404':
          description: Submission not found

    put:
      summary: Grade a submission
      operationId: gradeSubmission
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the student
          schema:
            type: string
        - name: assignCode
          in: path
          required: true
          description: The assignment code
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                grade:
                  type: number
      responses:
        '200':
          description: Submission graded successfully
        '404':
          description: Submission or assignment not found

  /submissions/delete/{id}:
    delete:
      summary: Delete a submission
      operationId: deleteSubmission
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the submission to delete
          schema:
            type: string
      responses:
        '200':
          description: Submission deleted successfully
        '404':
          description: Submission not found

  /files/delete/{id}:
    delete:
      summary: Delete a file
      operationId: deleteFile
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the file to delete
          schema:
            type: string
      responses:
        '200':
          description: File deleted successfully
        '404':
          description: File not found

  /files/download/{id}:
    get:
      summary: Download a file
      operationId: downloadFile
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the file to download
          schema:
            type: string
      responses:
        '200':
          description: File downloaded successfully
        '404':
          description: File not found

  /files/stream/{id}:
    get:
      summary: Stream a file
      operationId: streamFile
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the file to stream
          schema:
            type: string
      responses:
        '200':
          description: File streamed successfully
        '404':
          description: File not found